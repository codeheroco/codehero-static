---
layout: post
status: publish
published: true
title: Módulos
author: Ricardo Sampayo
author_login: ricardo
author_email: ricardo9588@gmail.com
author_url: http://www.ricardosampayo.com
wordpress_id: 1993
wordpress_url: http://codehero.co/?p=1993
date: 2013-08-16 00:01:56.000000000 -04:30
serie: Ruby desde Cero
thumbnail: http://i.imgur.com/lBeuRS1.png
description: Capítulo de la serie Ruby desde Cero, en el que se estudia el concepto de módulos del lenguaje.
categories:
- Cursos
- Ruby
tags:
- Ruby
- Cursos
- Módulos
---
<p>Bienvenidos una vez más a Ruby desde Cero. En los últimos capítulos estudiamos las clases y el paradigma orientado a objetos aplicados al lenguaje. Si aún no te has puesto al día con la serie te invito a echarle un vistazo a <a href="[http://codehero.co/series/ruby-desde-cero/]">Ruby desde Cero</a></p>

<p>En este nuevo capítulo estaremos estudiando los módulos en Ruby, al igual que en los capítulos anteriores definiendo cada una de las características, mostrando la sintaxis y ejecutando ejemplos básicos para comprender mejor el tema.</p>

<hr />

<h2>¿Qué son los módulos?</h2>

<p>Un módulo es una colección de métodos y constantes. Mediante el uso de módulos, podemos dividir el sistema o el programa en partes independientes para facilitarnos el uso de los métodos para reutilizarlos, es decir, los módulos podrían ser paquetes de métodos y clases relacionados que nos facilitarán encontrarlos más rápido.</p>

<p>Aunque el concepto de módulos se asemeja bastante al de clases que también tiene métodos, clases y constantes, se diferencian básicamente en que no se pueden crear objetos de un módulo, es decir, no se instancian los módulos.</p>

<p>Otra ventaja, es que podemos almacenar nuestros programas de forma modular: cada módulo añade una característica. Esto también lo permitían las clases, pero la ventaja de los módulos, es que no hace falta crear una serie de jerarquías, que podría llegar a ser engorroso.</p>

<p>Lo primero que debemos hacer para adentrarnos en el concepto y comenzar a elaborar algunos ejemplos es conocer la sintaxis:</p>

```ruby
module Identificador
  declaracion1
  declaracion2
  . . .
end
```

<p>Al igual que con los métodos de clase, se llama a un método del módulo precediendo su nombre con el nombre módulo y un punto ( . ), y se hace referencia a una constante utilizando el nombre del módulo y el signo de dos puntos ( : ).</p>

<hr />

<h2>Principales usos de los módulos</h2>

<p>Los módulos en Ruby básicamente se utilizan para definir espacios de nombres ('namespace') que básicamente nos agrupa todas las clases, métodos, variables y otros elementos, dentro de un especie de grupo o paquete. Otro de los usos es el 'mixins' que nos permite agregar funcionalidad extras a una clase. Ésto lo definiremos mejor a continuación:</p>

<h3>Espacios de nombres ('namespace')</h3>

<p>Cuando estamos desarrollando algún proyecto grande y las lineas de código crecen desenfrenadamente, surge la necesidad de organizar de alguna forma nuestro código para poder manipularlo con facilidad, y es aquí donde nos es útil este tipo de implementación de los módulos.</p>

<p>Con los módulos es posible agrupar una serie de métodos y clases relacionadas de alguna manera en un archivo independiente, de tal manera que podamos utilizar estos métodos como una librería independiente. Un caso típico de un módulo es 'Math': este módulo cuenta con una serie de funciones trigonométricas agrupadas en un sólo paquete.</p>

<p>Los espacios de nombres también evitan el problema de que surja una ambiegüedad en el caso de que haya dos componentes con un mismo nombre. Por ejemplo, podemos tener dentro de un programa varias clases con el nombre “Settings”, pero cada una estará referida a algo concreto. Incluyendo esas clases en distintos módulos, conseguimos que puedan ser identificadas de forma unívoca.</p>

<p>Luego de tanta descripción veamos un ejemplo y así seguramente entenderemos mejor el concepto de namespace:</p>

```ruby
module Semana
  PRIMER_DIA = "lunes"
  def Semana.semanas_en_mes
    puts "un mes tiene cuatro semanas"
    return 4
  end
  def Semana.semanas_en_anio
    puts "un anio tiene 52 semanas"
  end
end

class Codehero
  N_MESES = 10
  def n_de_meses
    puts "las semanas inician el #{Semana::PRIMER_DIA}"
    number=10 * Semana::semanas_en_mes
    puts "cantidad de semanas en 10 meses es #{number}"
  end
end

puts Semana::PRIMER_DIA
Semana.semanas_en_mes
Semana.semanas_en_anio
puts "==================="
d1=Codehero.new
d1.n_de_meses
```

<p>En este ejemplo creamos un módulo 'Semana' que agrupa una serie de métodos y constantes relacionadas a una semana, que posteriormente utilizamos en una clase de prueba y fuera de ella. El resultado de esta ejecución lo podemos observar a continuación:</p>

```ruby
lunes
un mes tiene cuatro semanas
un anio tiene 52 semanas
===================
las semanas inician el lunes
un mes tiene cuatro semanas
cantidad de semanas en 10 meses es 40
```

<h3>Mixins</h3>

<p>Esta implementación de los módulos nos da una forma bastante elegante de agregarle funcionalidad a las clases. Sin embargo, su verdadero poder viene cuando el código en el mixin comienza a interactuar con el código de la clase que lo utiliza.</p>

<p>Vamos a ver un ejemplo en el que añadimos un método a la clase String que elimina los espacios en blanco de principio y fin de una cadena de caracteres.</p>

```ruby
module UtilidadesString
  def quitar_espacios
    self.to_s.strip.gsub(' ', '')
  end
end

class String
  include UtilidadesString
end

puts " Hola CodeHero, El Mejor Portal De Aprendizaje En Espaniol ".quitar_espacios
```

<p>El resultado de la ejecución del programa es una cadena sin espacios:</p>

```ruby
HolaCodeHero,ElMejorPortalDeAprendizajeEnEspaniol
```

<p>En el ejemplo vimos como le agregamos un método de instancia a la clase String, con esta herramienta también es posible extender una clase con métodos de clases, haciendo uso del 'extend'. Haciendo posible incluir varios módulos en una misma clase, consiguiendo un efecto similar a una herencia múltiple no permitida por Ruby. Veamos un ejemplo sencillo de esto:</p>

```ruby
module Calendario
  def self.included(base)
    base.send :include, Dia
    base.send :extend, Semana
  end

  module Dia
    def dia_en_anio
      "un anio tiene 365 dias"
    end
  end

  module Semana
    PRIMER_DIA = "lunes"

    def semanas_x_mes(number)
      "#{number} meses tiene #{number * 4} semanas"
    end
  end
end

class MiClase
  include Calendario
end

#llamada a las clases

puts MiClase.semanas_x_mes(4)
puts MiClase.new.dia_en_anio
```

<p>Como podemos ver en el ejemplo al agregar en un módulo el método 'included', éste se ejecutará cada vez que sea incluido por otro módulo o clase. En este ejemplo, cuando se incluye el módulo, añadimos los métodos de instancia(include) y de clase(extend). Dándonos como resultado una clase con comportamientos diferentes de dos módulos, el resultado de ejecutar el programa es el siguiente:</p>

```ruby
4 meses tiene 16 semanas
un anio tiene 365 dias
```

<hr />

<h2>Conclusión</h2>

<p>En este capítulo aprendimos un concepto básico de Ruby como lo son los módulos, abarcando el concepto principal, ventajas, sintaxis, usos y manipulación de esta útil característica del lenguaje.</p>

<p>Si te surgen dudas con nuestros cursos, no te detengas y danos tus comentarios, que con gusto estamos dispuestos a resolver tus inquietudes.</p>

<p>¡Hasta el próximo capítulo!</p>
